from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ConversationHandler,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
    CallbackQueryHandler
)
from experiments.projectile import ProjectileMotion
from models.params import ProjectileParams
from utils.plotting import PlotGenerator
from utils.validators import validate_positive_number, validate_angle
import numpy as np
import logging
from io import BytesIO

# –°–æ—Å—Ç–æ—è–Ω–∏—è ConversationHandler
(
    INPUT_MASS, INPUT_ANGLE, INPUT_GRAVITY,
    INPUT_H0, INPUT_V0, CONFIRM_PARAMS
) = range(6)

class ProjectileMotionHandler:
    def __init__(self):
        self.calculator = ProjectileMotion()
        self.logger = logging.getLogger(__name__)

    async def start_experiment(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞—á–∞–ª–æ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞ —Å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–º –º–µ–Ω—é"""
        keyboard = [
            [InlineKeyboardButton("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã", callback_data='default')],
            [InlineKeyboardButton("–í–≤–µ—Å—Ç–∏ —Å–≤–æ–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã", callback_data='custom')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await update.message.reply_text(
            "üî≠ <b>–≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç: –î–≤–∏–∂–µ–Ω–∏–µ —Å–Ω–∞—Ä—è–¥–∞</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –≤–≤–æ–¥–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤:",
            reply_markup=reply_markup,
            parse_mode='HTML'
        )
        return INPUT_MASS

    async def handle_mode_selection(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞"""
        query = update.callback_query
        await query.answer()

        if query.data == 'default':
            context.user_data.update({
                'mass': 1.0,
                'angle': 45,
                'gravity': 9.8,
                'h0': 0,
                'v0': 20
            })
            await query.edit_message_text("‚úÖ –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã")
            return await self.show_confirmation(update, context)
        else:
            await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –º–∞—Å—Å—É —Å–Ω–∞—Ä—è–¥–∞ (–∫–≥):")
            return INPUT_MASS

    async def input_mass(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–∞—Å—Å—ã —Å –ø—Ä–∏–º–µ—Ä–æ–º"""
        try:
            mass = validate_positive_number(update.message.text, "–ú–∞—Å—Å–∞")
            context.user_data['mass'] = mass
            await update.message.reply_text(
                "üìê –í–≤–µ–¥–∏—Ç–µ —É–≥–æ–ª –∑–∞–ø—É—Å–∫–∞ (0-90¬∞):\n"
                "<i>–ü—Ä–∏–º–µ—Ä: 45 (–¥–ª—è —É–≥–ª–∞ –≤ 45 –≥—Ä–∞–¥—É—Å–æ–≤)</i>",
                parse_mode='HTML'
            )
            return INPUT_ANGLE
        except ValueError as e:
            await update.message.reply_text(f"‚ùå {str(e)}\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
            return INPUT_MASS

    async def input_angle(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É–≥–ª–∞ —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π"""
        try:
            angle = validate_angle(update.message.text)
            context.user_data['angle'] = angle
            await update.message.reply_text(
                "üåç –í–≤–µ–¥–∏—Ç–µ —É—Å–∫–æ—Ä–µ–Ω–∏–µ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –ø–∞–¥–µ–Ω–∏—è (–º/—Å¬≤):\n"
                "<i>–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ó–µ–º–ª–∏: 9.8</i>",
                parse_mode='HTML'
            )
            return INPUT_GRAVITY
        except ValueError as e:
            await update.message.reply_text(f"‚ùå {str(e)}\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
            return INPUT_ANGLE

    async def input_gravity(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–∫–æ—Ä–µ–Ω–∏—è —Å –ø–æ–¥—Å–∫–∞–∑–∫–æ–π"""
        try:
            gravity = validate_positive_number(update.message.text, "–£—Å–∫–æ—Ä–µ–Ω–∏–µ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –ø–∞–¥–µ–Ω–∏—è")
            context.user_data['gravity'] = gravity
            await update.message.reply_text(
                "üèó –í–≤–µ–¥–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω—É—é –≤—ã—Å–æ—Ç—É (–º):\n"
                "<i>–ü—Ä–∏–º–µ—Ä: 10 (–¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å 10 –º–µ—Ç—Ä–æ–≤)</i>",
                parse_mode='HTML'
            )
            return INPUT_H0
        except ValueError as e:
            await update.message.reply_text(f"‚ùå {str(e)}\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
            return INPUT_GRAVITY

    async def input_h0(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã—Å–æ—Ç—ã"""
        try:
            h0 = validate_positive_number(update.message.text, "–ù–∞—á–∞–ª—å–Ω–∞—è –≤—ã—Å–æ—Ç–∞")
            context.user_data['h0'] = h0
            await update.message.reply_text(
                "üí® –í–≤–µ–¥–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω—É—é —Å–∫–æ—Ä–æ—Å—Ç—å (–º/—Å):\n"
                "<i>–ü—Ä–∏–º–µ—Ä: 15 (–¥–ª—è 15 –º/—Å)</i>",
                parse_mode='HTML'
            )
            return INPUT_V0
        except ValueError as e:
            await update.message.reply_text(f"‚ùå {str(e)}\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
            return INPUT_H0

    async def input_v0(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∫–æ—Ä–æ—Å—Ç–∏ –∏ –ø–µ—Ä–µ—Ö–æ–¥ –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é"""
        try:
            v0 = validate_positive_number(update.message.text, "–ù–∞—á–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å")
            context.user_data['v0'] = v0
            return await self.show_confirmation(update, context)
        except ValueError as e:
            await update.message.reply_text(f"‚ùå {str(e)}\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
            return INPUT_V0

    async def show_confirmation(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"""
        params_text = (
            "üìã <b>–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞:</b>\n"
            f"‚Ä¢ –ú–∞—Å—Å–∞: {context.user_data['mass']} –∫–≥\n"
            f"‚Ä¢ –£–≥–æ–ª: {context.user_data['angle']}¬∞\n"
            f"‚Ä¢ –£—Å–∫–æ—Ä–µ–Ω–∏–µ: {context.user_data['gravity']} –º/—Å¬≤\n"
            f"‚Ä¢ –í—ã—Å–æ—Ç–∞: {context.user_data['h0']} –º\n"
            f"‚Ä¢ –°–∫–æ—Ä–æ—Å—Ç—å: {context.user_data['v0']} –º/—Å"
        )

        keyboard = [
            [InlineKeyboardButton("‚úÖ –ù–∞—á–∞—Ç—å —Ä–∞—Å—á–µ—Ç", callback_data='confirm')],
            [InlineKeyboardButton("üîÑ –ò–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã", callback_data='change')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        if hasattr(update, 'callback_query'):
            await update.callback_query.edit_message_text(
                params_text,
                reply_markup=reply_markup,
                parse_mode='HTML'
            )
        else:
            await update.message.reply_text(
                params_text,
                reply_markup=reply_markup,
                parse_mode='HTML'
            )
        return CONFIRM_PARAMS

    async def confirm_parameters(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"""
        query = update.callback_query
        await query.answer()

        if query.data == 'confirm':
            try:
                params = ProjectileParams(
                    mass=context.user_data['mass'],
                    angle=context.user_data['angle'],
                    gravity=context.user_data['gravity'],
                    initial_height=context.user_data['h0'],
                    initial_velocity=context.user_data['v0']
                )

                trajectory, velocities = self.calculator.calculate_trajectory(params)
                flight_time = len(trajectory) * 0.01
                max_height = np.max(trajectory[:, 1])
                distance = trajectory[-1, 0]
                max_speed = np.max(velocities)

                plot_buffer = BytesIO()
                PlotGenerator.generate_trajectory_plot(
                    trajectory=trajectory,
                    params=params,
                    output=plot_buffer
                )
                plot_buffer.seek(0)

                result_text = (
                    "üéØ <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞:</b>\n\n"
                    f"‚è± <b>–í—Ä–µ–º—è –ø–æ–ª–µ—Ç–∞:</b> {flight_time:.2f} —Å–µ–∫\n"
                    f"üìè <b>–ú–∞–∫—Å. –≤—ã—Å–æ—Ç–∞:</b> {max_height:.2f} –º\n"
                    f"üèÅ <b>–î–∞–ª—å–Ω–æ—Å—Ç—å:</b> {distance:.2f} –º\n"
                    f"üöÄ <b>–ú–∞–∫—Å. —Å–∫–æ—Ä–æ—Å—Ç—å:</b> {max_speed:.2f} –º/—Å"
                )

                await query.message.reply_photo(
                    photo=plot_buffer,
                    caption=result_text,
                    parse_mode='HTML'
                )
                plot_buffer.close()

                return ConversationHandler.END

            except Exception as e:
                self.logger.error(f"Calculation error: {str(e)}", exc_info=True)
                await query.message.reply_text(
                    "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–∞—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã."
                )
                return ConversationHandler.END
        else:
            await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –º–∞—Å—Å—É —Å–Ω–∞—Ä—è–¥–∞ (–∫–≥):")
            return INPUT_MASS

    async def cancel(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û—Ç–º–µ–Ω–∞ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞"""
        await update.message.reply_text(
            "‚ùå –≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç –æ—Ç–º–µ–Ω–µ–Ω. "
            "–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ –∫–æ–º–∞–Ω–¥–æ–π /projectile_motion"
        )
        return ConversationHandler.END

    def get_handler(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π ConversationHandler"""
        return ConversationHandler(
            entry_points=[CommandHandler("projectile_motion", self.start_experiment)],
            states={
                INPUT_MASS: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.input_mass)],
                INPUT_ANGLE: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.input_angle)],
                INPUT_GRAVITY: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.input_gravity)],
                INPUT_H0: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.input_h0)],
                INPUT_V0: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.input_v0)],
                CONFIRM_PARAMS: [CallbackQueryHandler(self.confirm_parameters)]
            },
            fallbacks=[
                CommandHandler("cancel", self.cancel),
                CallbackQueryHandler(self.handle_mode_selection, pattern='^(default|custom)$')
            ],
            allow_reentry=True
        )