from telegram import Update
from telegram.ext import (
    ConversationHandler,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes
)
from experiments.projectile import ProjectileMotion
from models.params import ProjectileParams
from utils.plotting import plot_trajectory
from utils.validators import validate_positive_number, validate_angle
import numpy as np

# –°–æ—Å—Ç–æ—è–Ω–∏—è ConversationHandler
(
    INPUT_MASS, INPUT_ANGLE, INPUT_GRAVITY,
    INPUT_H0, INPUT_V0, INPUT_DENSITY
) = range(6)

class ProjectileMotionHandler:
    def __init__(self):
        self.calculator = ProjectileMotion()

    async def start_experiment(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞—á–∞–ª–æ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞"""
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:\n1. –ú–∞—Å—Å–∞ (–∫–≥):")
        return INPUT_MASS

    async def input_mass(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–∞—Å—Å—ã"""
        try:
            mass = validate_positive_number(update.message.text, "–ú–∞—Å—Å–∞")
            context.user_data['mass'] = mass
            await update.message.reply_text("2. –£–≥–æ–ª –∑–∞–ø—É—Å–∫–∞ (0-90¬∞):")
            return INPUT_ANGLE
        except ValueError as e:
            await update.message.reply_text(str(e))
            return INPUT_MASS

    async def input_angle(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É–≥–ª–∞ –∑–∞–ø—É—Å–∫–∞"""
        try:
            angle = validate_angle(update.message.text)
            context.user_data['angle'] = angle
            await update.message.reply_text("3. –£—Å–∫–æ—Ä–µ–Ω–∏–µ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –ø–∞–¥–µ–Ω–∏—è (–º/—Å¬≤):")
            return INPUT_GRAVITY
        except ValueError as e:
            await update.message.reply_text(str(e))
            return INPUT_ANGLE

    async def input_gravity(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–∫–æ—Ä–µ–Ω–∏—è —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –ø–∞–¥–µ–Ω–∏—è"""
        try:
            gravity = validate_positive_number(update.message.text, "–£—Å–∫–æ—Ä–µ–Ω–∏–µ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –ø–∞–¥–µ–Ω–∏—è")
            context.user_data['gravity'] = gravity
            await update.message.reply_text("4. –ù–∞—á–∞–ª—å–Ω–∞—è –≤—ã—Å–æ—Ç–∞ (–º):")
            return INPUT_H0
        except ValueError as e:
            await update.message.reply_text(str(e))
            return INPUT_GRAVITY

    async def input_h0(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—á–∞–ª—å–Ω–æ–π –≤—ã—Å–æ—Ç—ã"""
        try:
            h0 = validate_positive_number(update.message.text, "–ù–∞—á–∞–ª—å–Ω–∞—è –≤—ã—Å–æ—Ç–∞")
            context.user_data['h0'] = h0
            await update.message.reply_text("5. –ù–∞—á–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å (–º/—Å):")
            return INPUT_V0
        except ValueError as e:
            await update.message.reply_text(str(e))
            return INPUT_H0

    async def input_v0(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—á–∞–ª—å–Ω–æ–π —Å–∫–æ—Ä–æ—Å—Ç–∏"""
        try:
            v0 = validate_positive_number(update.message.text, "–ù–∞—á–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å")
            context.user_data['v0'] = v0
            await update.message.reply_text("6. –ü–ª–æ—Ç–Ω–æ—Å—Ç—å —à–∞—Ä–∞ (–∫–≥/–º¬≥):")
            return INPUT_DENSITY
        except ValueError as e:
            await update.message.reply_text(str(e))
            return INPUT_V0

    async def input_density(self , update: Update , context: ContextTypes.DEFAULT_TYPE):
        """–§–∏–Ω–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ - —Ä–∞—Å—á–µ—Ç –∏ –≤—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        try:
            density = validate_positive_number(update.message.text , "–ü–ª–æ—Ç–Ω–æ—Å—Ç—å")
            params = ProjectileParams(
                mass=context.user_data['mass'] ,
                angle=context.user_data['angle'] ,
                gravity=context.user_data['gravity'] ,
                initial_height=context.user_data['h0'] ,
                initial_velocity=context.user_data['v0'] ,
                density=density
            )

            trajectory , velocities = self.calculator.calculate_trajectory(params)

            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≥—Ä–∞—Ñ–∏–∫–∞
            import matplotlib
            matplotlib.use('Agg')
            from utils.plotting import plot_trajectory
            plot_trajectory(trajectory)

            # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
            result = (
                "üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:\n"
                f"‚è± –í—Ä–µ–º—è: {len(trajectory) * 0.01:.2f} —Å–µ–∫\n"
                f"üìè –ú–∞–∫—Å. –≤—ã—Å–æ—Ç–∞: {np.max(trajectory[: , 1]):.2f} –º\n"
                f"üèÅ –î–∞–ª—å–Ω–æ—Å—Ç—å: {trajectory[-1 , 0]:.2f} –º\n"
                f"üöÄ –ú–∞–∫—Å. —Å–∫–æ—Ä–æ—Å—Ç—å: {np.max(velocities):.2f} –º/—Å"
            )

            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏ –≥—Ä–∞—Ñ–∏–∫–∞
            await update.message.reply_text(result)
            with open("trajectory.png" , "rb") as photo:
                await update.message.reply_photo(photo)

            return ConversationHandler.END

        except ValueError as e:
            await update.message.reply_text(str(e))
            return INPUT_DENSITY
        except Exception as e:
            await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–∞—Ö: {str(e)}")
            return INPUT_DENSITY

    async def cancel(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û—Ç–º–µ–Ω–∞ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞"""
        await update.message.reply_text("–≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç –æ—Ç–º–µ–Ω–µ–Ω.")
        return ConversationHandler.END

    def get_handler(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π ConversationHandler"""
        return ConversationHandler(
            entry_points=[CommandHandler("projectile_motion", self.start_experiment)],
            states={
                INPUT_MASS: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.input_mass)],
                INPUT_ANGLE: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.input_angle)],
                INPUT_GRAVITY: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.input_gravity)],
                INPUT_H0: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.input_h0)],
                INPUT_V0: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.input_v0)],
                INPUT_DENSITY: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.input_density)]
            },
            fallbacks=[CommandHandler("cancel", self.cancel)]
        )